"";"throw";"handler";"assertion"
"Ada[1]";"raise exception_name «with string_expression»";"begin statementsexception when exception_list1 => statements; when exception_list2 => statements; ... «when others => statements;»end[b]";"pragma Assert («Check =>» boolean_expression ««Message =>» string_expression») [function | procedure | entry] with Pre => boolean_expression Post => boolean_expression any_type with Type_Invariant => boolean_expression"
"APL";"«string_expression» ⎕SIGNAL number_expression";":Trap number«s»_expression statements «:Case number«s»_expression statements» ... «:Else number«s»_expression statements»:EndTrap";"«string_expression» ⎕SIGNAL 98/⍨~condition"
"C (C99)";"longjmp(state, exception);";"switch (setjmp(state)) { case 0: instructions break; case exception: instructions ... }";"assert(condition);"
"C++";"throw exception;";"try { instructions } catch «(exception)» { instructions } ...";"assert(condition);"
"C#";"throw exception;";"try { instructions } catch «(exception« name»)» { instructions } ... «finally { instructions }»";"assert(condition);"
"Java";"throw exception;";"try { instructions } catch (exception) { instructions } ... «finally { instructions }»";"assert(condition);"
"JavaScript";"throw exception;";"try { instructions } catch (exception) { instructions } «finally { instructions }»";"assert(condition);"
"D";"throw exception;";"try { instructions } catch (exception) { instructions } ... «finally { instructions }»";"assert(condition);"
"PHP";"throw exception;";"try { instructions } catch (exception) { instructions } ... «finally { instructions }»";"assert(condition);"
"S-Lang";"throw exception;";"try { instructions } catch «exception» { instructions } ... «finally { instructions }»";"assert(condition);"
"Windows PowerShell";"throw exception;";"trap «[exception]» { instructions } ... instructions or try { instructions } catch «[exception]» { instructions } ... «finally { instructions }»";"assert(condition);"
"Objective-C";"throw exception;";"@throw exception;";"assert(condition);"
"Swift";"throw exception;";"throw exception (2.x)";"assert(condition);"
"Perl";"throw exception;";"die exception;";"die exception;"
"Raku";"throw exception;";"try { instructions CATCH { when exception { instructions } ...}}";"die exception;"
"Ruby";"throw exception;";"raise exception";"die exception;"
"Smalltalk";"throw exception;";"exception raise";"die exception;"
"Common Lisp";"throw exception;";"(error ""exception"") or (error type arguments) or (error (make-condition type arguments))";"die exception;"
"Scheme (R6RS)";"throw exception;";"(raise exception)";"die exception;"
"ISLISP";"throw exception;";"(error ""error-string"" objects) or (signal-condition condition continuable)";"die exception;"
"Pascal";"throw exception;";"raise Exception.Create()";"die exception;"
"Visual Basic";"throw exception;";"Err.Raise ERRORNUMBER";"die exception;"
"Visual Basic .NET";"throw exception;";"Throw exceptionor Error errorcode";"die exception;"
"Xojo";"throw exception;";"Raise exception";"die exception;"
"Python";"throw exception;";"raise exception";"die exception;"
"Fortran";"throw exception;";"N/A";"N/A";"N/A"
"Forth";"throw exception;";"code THROW";"die exception;"
"OCaml";"throw exception;";"raise exception";"raise exception"
"F#";"throw exception;";"try expression with pattern -> expression ... or try expression finally expression";"raise exception"
"Standard ML";"throw exception;";"raise exception «arg»";"raise exception"
"Haskell (GHC)";"throw exception;";"throw exception or throwError expression";"raise exception"
"COBOL";"throw exception;";"RAISE «EXCEPTION» exception";"raise exception"
