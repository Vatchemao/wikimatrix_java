"";"while";"do while";"for i = first to last";"foreach"
"Ada[1]";"while condition loop statements end loop";"loop statements exit when not condition end loop";"for index in «reverse» [first .. last | discrete_type] loop statements end loop";"for item of «reverse» iterator loop statements end loop (for [all | some] [in | of] [first .. last | discrete_type | iterator] => predicate)[b]"
"ALGOL 68";"«for index» «from first» «by increment» «to last» «while condition» do statements od";"«for index» «from first» «by increment» «to last» «while condition» do statements od";"«for index» «from first» «by increment» «to last» «while condition» do statements od";"for key «to upb list» do «typename val=list[key];» statements od"
"ALGOL 68";"«while condition» do statements od";"for key «to upb list» do «typename val=list[key];» statements od";"«while statements; condition» do statements od";"«for index» «from first» «by increment» «to last» do statements od"
"ALGOL 68";"APL";"for key «to upb list» do «typename val=list[key];» statements od";":While condition statements :EndWhile";":Repeat statements:Until condition"
"ALGOL 68";"C (C99)";"for key «to upb list» do «typename val=list[key];» statements od";"instructions can be a single statement or a block in the form of: { statements } while (condition) instructions";"do instructions while (condition);"
"ALGOL 68";"Objective-C";"for key «to upb list» do «typename val=list[key];» statements od";"for (type item in set) instructions";""
"ALGOL 68";"C++ (STL)";"for key «to upb list» do «typename val=list[key];» statements od";"«std::»for_each(start, end, function) (C++11) for (type item : set) instructions";""
"ALGOL 68";"C#";"for key «to upb list» do «typename val=list[key];» statements od";"foreach (type item in set) instructions";""
"ALGOL 68";"Java";"for key «to upb list» do «typename val=list[key];» statements od";"for (type item : set) instructions";""
"ALGOL 68";"JavaScript";"for key «to upb list» do «typename val=list[key];» statements od";"for (var i = first; i <= last; i++) instructions";"for (var item of set) instructions (since EcmaScript 2015[11])"
"ALGOL 68";"PHP";"for key «to upb list» do «typename val=list[key];» statements od";"foreach (range(first, last) as $i) instructions or for ($i = first; $i <= last; $i++) instructions";"foreach (set as item) instructions or foreach (set as key => item) instructions"
"ALGOL 68";"Windows PowerShell";"for key «to upb list» do «typename val=list[key];» statements od";"for ($i = first; $i -le last; $i++) instructions";"foreach (item in set) instructions using item"
"ALGOL 68";"D";"for key «to upb list» do «typename val=list[key];» statements od";"foreach (i; first ... last) instructions";"foreach («type» item; set) instructions"
"ALGOL 68";"Go";"for key «to upb list» do «typename val=list[key];» statements od";"for condition { instructions }";""
"ALGOL 68";"Swift";"for key «to upb list» do «typename val=list[key];» statements od";"while condition { instructions }";"repeat { instructions } while condition (2.x) do { instructions } while condition (1.x)"
"ALGOL 68";"Perl";"for key «to upb list» do «typename val=list[key];» statements od";"while (condition) { instructions } or until (notcondition) { instructions }";"do { instructions } while (condition) or do { instructions } until (notcondition)"
"ALGOL 68";"Raku";"for key «to upb list» do «typename val=list[key];» statements od";"while condition { instructions } or until notcondition { instructions }";"repeat { instructions } while condition or repeat { instructions } until notcondition"
"ALGOL 68";"Ruby";"for key «to upb list» do «typename val=list[key];» statements od";"while condition instructionsend or until notcondition instructions end";"begin instructions end while condition or begin instructions end until notcondition"
"ALGOL 68";"Bash shell";"for key «to upb list» do «typename val=list[key];» statements od";"while condition ;do instructionsdone or until notcondition ;do instructions done";"N/A"
"ALGOL 68";"Scala";"for key «to upb list» do «typename val=list[key];» statements od";"while (condition) { instructions }";"do { instructions } while (condition)"
"ALGOL 68";"Smalltalk";"for key «to upb list» do «typename val=list[key];» statements od";"conditionBlock whileTrue: loopBlock";"loopBlock doWhile: conditionBlock"
"ALGOL 68";"Common Lisp";"for key «to upb list» do «typename val=list[key];» statements od";"(loop while condition do instructions) or (do () (notcondition) instructions)";"(loop do instructions while condition)"
"ALGOL 68";"Scheme";"for key «to upb list» do «typename val=list[key];» statements od";"(do () (notcondition) instructions) or (let loop () (if condition (begin instructions (loop))))";"(let loop () (instructions (if condition (loop))))"
"ALGOL 68";"ISLISP";"for key «to upb list» do «typename val=list[key];» statements od";"(while condition instructions)";"(tagbody loop instructions (if condition (go loop))"
"ALGOL 68";"Pascal";"for key «to upb list» do «typename val=list[key];» statements od";"while condition do begin instructions end";"repeat instructions until notcondition;"
"ALGOL 68";"Visual Basic";"for key «to upb list» do «typename val=list[key];» statements od";"Do While condition instructionsLoop or Do Until notcondition instructionsLoopor While condition instructions Wend (Visual Basic) End While (Visual Basic .NET)";"Do instructions Loop While condition or Do instructions Loop Until notcondition"
"ALGOL 68";"Visual Basic .NET";"for key «to upb list» do «typename val=list[key];» statements od";"For i« As type» = first To last« Step 1» instructionsNext« i»[a]";"For Each item« As type» In set instructions Next« item»"
"ALGOL 68";"Xojo";"for key «to upb list» do «typename val=list[key];» statements od";"While condition instructionsWend";"Do Until notcondition instructionsLoop or Do instructions Loop Until notcondition"
"ALGOL 68";"Python";"for key «to upb list» do «typename val=list[key];» statements od";"while condition : Tab ↹ instructions «else: Tab ↹ instructions»";"N/A"
"ALGOL 68";"S-Lang";"for key «to upb list» do «typename val=list[key];» statements od";"while (condition) { instructions } «then optional-block»";"do { instructions } while (condition) «then optional-block»"
"ALGOL 68";"Fortran";"for key «to upb list» do «typename val=list[key];» statements od";"DO WHILE (condition) instructions ENDDO";"DO instructions IF (condition) EXIT ENDDO"
"ALGOL 68";"Forth";"for key «to upb list» do «typename val=list[key];» statements od";"BEGIN « instructions » condition WHILE instructions REPEAT";"BEGIN instructions condition UNTIL"
"ALGOL 68";"OCaml";"for key «to upb list» do «typename val=list[key];» statements od";"while condition do instructions done";"N/A"
"ALGOL 68";"F#";"for key «to upb list» do «typename val=list[key];» statements od";"while condition do Tab ↹ instructions";"N/A"
"ALGOL 68";"Standard ML";"for key «to upb list» do «typename val=list[key];» statements od";"while condition do ( instructions )";"N/A";"N/A"
"ALGOL 68";"Haskell (GHC)";"for key «to upb list» do «typename val=list[key];» statements od";"N/A";"N/A"
"ALGOL 68";"Eiffel";"for key «to upb list» do «typename val=list[key];» statements od";"from setup until condition loop instructions end";"from setup until condition loop instructions end";"from setup until condition loop instructions end";"from setup until condition loop instructions end"
"ALGOL 68";"CoffeeScript";"CoffeeScript";"while condition expression";"N/A"
"ALGOL 68";"expression while condition";"CoffeeScript";"";""
"ALGOL 68";"while condition then expression";"CoffeeScript";"";""
"ALGOL 68";"until condition expression";"CoffeeScript";"";""
"ALGOL 68";"expression until condition";"CoffeeScript";"for i in [first..last] then expression";"for item in set then expression"
"ALGOL 68";"until condition then expression";"CoffeeScript";"expression for i in [first..last]";"expression for item in set"
"ALGOL 68";"COBOL";"COBOL";"PERFORM procedure-1 «THROUGH procedure-2» ««WITH» TEST BEFORE» UNTIL condition[c]";"PERFORM procedure-1 «THROUGH procedure-2» «WITH» TEST AFTER UNTIL condition[c]"
"ALGOL 68";"PERFORM ««WITH» TEST BEFORE» UNTIL condition expression END-PERFORM";"COBOL";"PERFORM «WITH» TEST AFTER UNTIL condition expression END-PERFORM";"PERFORM VARYING i FROM first BY increment UNTIL i > last expression END-PERFORM[d]"
